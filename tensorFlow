package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;

import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;

import java.util.List;

public class UGAuto extends LinearOpMode {

    UltimateGoalRobotSetup robot = new UltimateGoalRobotSetup();

    private static final String TFOD_MODEL_ASSET = "UltimateGoal.tflite";
    private static final String LABEL_FIRST_ELEMENT = "Quad";
    private static final String LABEL_SECOND_ELEMENT = "Single";
    private static final String VUFORIA_KEY = " -- YOUR NEW VUFORIA KEY GOES HERE  --- ";
    private VuforiaLocalizer vuforia;
    public TFObjectDetector tfod;

    public void initVuforia() {
        /*
         * Configure Vuforia by creating a Parameter object, and passing it to the Vuforia engine.
         */
        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraName = hardwareMap.get(WebcamName.class, "Webcam 1");

        //  Instantiate the Vuforia engine
        vuforia = ClassFactory.getInstance().createVuforia(parameters);

        // Loading trackables is not necessary for the TensorFlow Object Detection engine.
    }

    public void initTfod() {
        int tfodMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(
                "tfodMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters(tfodMonitorViewId);
        tfodParameters.minResultConfidence = 0.8f;
        tfod = ClassFactory.getInstance().createTFObjectDetector(tfodParameters, vuforia);
        tfod.loadModelFromAsset(TFOD_MODEL_ASSET, LABEL_FIRST_ELEMENT, LABEL_SECOND_ELEMENT);
    }

    public String analyseStack() {
        if (tfod != null) {
            // getUpdatedRecognitions() will return null if no new information is available since
            // the last time that call was made.
            List<Recognition> updatedRecognitions = tfod.getUpdatedRecognitions();

            if (updatedRecognitions != null) {
                // Loop through found ring stacks. Theoretically should only ever be one stack found
                for (Recognition recognition : updatedRecognitions) {
                    //Verify the stack that was found meets minimum confidence value
                    if (recognition.getConfidence() > .8) {
                        if (recognition.getLabel().equals("Single")) {
                            //Single ring stack found so that means we need to go to target zone B
                            return "B";
                        } else {
                            //4 ring stack found so that means we need to go to target zone C
                            return "C";
                        }
                    }
                }
            }
        }

        // If we got this far, it means that either we did not find a ring stack (i.e. no rings in the stack
        // or something went wrong. In either case we should go for target zone A
        return "A";
    }

    @Override
    public void runOpMode() throws InterruptedException {
        robot.hardwareInit(hardwareMap);
        initVuforia();
        initTfod();

        if (tfod != null) {
            tfod.activate();
        }

        waitForStart();

        String ringStack = analyseStack();

        if (ringStack.equals("C")) {
            // Code for what to do for target zone C goes here
            robot.drive(0.9, 85, robot.FORWARD);
        } else if (ringStack.equals("B")) {
            // Code for what to do for target zone B goes here
            robot.strafe(0.9, 20, robot.LEFT);
            robot.drive(0.9, 70, robot.FORWARD);
        } else {
            // Code for what to do for target zone A goes here
            robot.drive(0.9, 85, robot.FORWARD);
        }
    }
}
